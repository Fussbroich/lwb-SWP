package main

import (
	"fmt"
	"strings"
	"unicode/utf8"
)

func teileTextInZeilen(text string, nMax uint) (zeilen []string) {
	// Brich Zeilen um, die länger als nMax Zeichen sind
	for _, line := range strings.Split(text, "\n") {
		if len(line) <= int(nMax) {
			zeilen = append(zeilen, line)
		} else {
			// Teile lange Zeilen in Teile von maximal n Zeichen auf
			for len(line) > 0 {
				if len(line) > int(nMax) {
					// Suche nach einem Leerzeichen oder Bindestrich, um die Zeile zu unterbrechen
					breakIndex := int(nMax)
					for breakIndex > 0 && !isWhitespaceOrHyphen(line[breakIndex-1]) {
						// Überprüfe, ob das Zeichen ein mehrbytefähiges Rune ist
						if utf8.RuneStart(line[breakIndex-1]) {
							_, size := utf8.DecodeLastRuneInString(line[:breakIndex])
							breakIndex -= size
						} else {
							breakIndex--
						}
					}
					if breakIndex == 0 {
						// Kein Trennzeichen gefunden, daher verwende nMax Zeichen
						zeilen = append(zeilen, line[:nMax])
						line = line[nMax:]
					} else {
						// Trennzeichen gefunden, daher verwende breakIndex
						zeilen = append(zeilen, line[:breakIndex])
						line = line[breakIndex:]
					}
				} else {
					zeilen = append(zeilen, line)
					break
				}
			}
		}
	}
	return
}

// Hilfsfunktion, um zu überprüfen, ob ein Zeichen ein Leerzeichen oder Bindestrich ist
func isWhitespaceOrHyphen(char byte) bool {
	return char == ' ' || char == '-'
}

func main() {
	text := "Dies ist ein Beispieltext, der   in Zeilen aufgeteilt werden soll. Jede Zeile sollte maximal 20 Zeichen lang sein. Enthält der Text ein \\n,\n so fängt ebenfalls eine neue Zeile an."
	maxLineLength := uint(20)
	lines := teileTextInZeilen(text, maxLineLength)

	for i, line := range lines {
		fmt.Printf("Zeile %d: %s\n", i+1, line)
	}
}
